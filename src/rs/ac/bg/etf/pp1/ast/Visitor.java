// generated with ast extension for cup
// version 0.8
// 27/5/2023 20:47:0


package rs.ac.bg.etf.pp1.ast;

public interface Visitor { 

    public void visit(Mulop Mulop);
    public void visit(FormParList FormParList);
    public void visit(Relop Relop);
    public void visit(MulopFactorList MulopFactorList);
    public void visit(Var Var);
    public void visit(StatementList StatementList);
    public void visit(Addop Addop);
    public void visit(Factor Factor);
    public void visit(CondTerm CondTerm);
    public void visit(VarList VarList);
    public void visit(ConstList ConstList);
    public void visit(DeclList DeclList);
    public void visit(Term Term);
    public void visit(Condition Condition);
    public void visit(Value Value);
    public void visit(RetVal RetVal);
    public void visit(Expr Expr);
    public void visit(ActPars ActPars);
    public void visit(DesignatorList DesignatorList);
    public void visit(DesignatorStatement DesignatorStatement);
    public void visit(Decl Decl);
    public void visit(Statement Statement);
    public void visit(CondFact CondFact);
    public void visit(MethList MethList);
    public void visit(FormPars FormPars);
    public void visit(AddopTermList AddopTermList);
    public void visit(MulopMod MulopMod);
    public void visit(MulopDiv MulopDiv);
    public void visit(MulopMul MulopMul);
    public void visit(AddopMinus AddopMinus);
    public void visit(AddopPlus AddopPlus);
    public void visit(RelopL RelopL);
    public void visit(RelopG RelopG);
    public void visit(RelopLE RelopLE);
    public void visit(RelopGE RelopGE);
    public void visit(RelopNE RelopNE);
    public void visit(RelopEE RelopEE);
    public void visit(Assignop Assignop);
    public void visit(Label Label);
    public void visit(CondFactExprExpr CondFactExprExpr);
    public void visit(CondFactExpr CondFactExpr);
    public void visit(CondTermFact CondTermFact);
    public void visit(CondTermAnd CondTermAnd);
    public void visit(ConditionCondTerm ConditionCondTerm);
    public void visit(ConditionOr ConditionOr);
    public void visit(ActParsEnd ActParsEnd);
    public void visit(ActParsStart ActParsStart);
    public void visit(ActParMoreExpr ActParMoreExpr);
    public void visit(ActParExpr ActParExpr);
    public void visit(FactorNewExprExpr FactorNewExprExpr);
    public void visit(FactorNewExpr FactorNewExpr);
    public void visit(FactorExpr FactorExpr);
    public void visit(FactorBool FactorBool);
    public void visit(FactorChar FactorChar);
    public void visit(FactorNum FactorNum);
    public void visit(FactorDesignatorActPars FactorDesignatorActPars);
    public void visit(FactorDesignatorNoActPars FactorDesignatorNoActPars);
    public void visit(FactorDesignator FactorDesignator);
    public void visit(OneElementMulopFactorList OneElementMulopFactorList);
    public void visit(MoreElementsMulopFactorList MoreElementsMulopFactorList);
    public void visit(TermMulopFactor TermMulopFactor);
    public void visit(TermFactor TermFactor);
    public void visit(EmptyAddopTermList EmptyAddopTermList);
    public void visit(NotEmptyAddopTermList NotEmptyAddopTermList);
    public void visit(PositiveExpr PositiveExpr);
    public void visit(NegativeExpr NegativeExpr);
    public void visit(Temp Temp);
    public void visit(EmptyDesignatorList EmptyDesignatorList);
    public void visit(NotEmptyDesignatorList NotEmptyDesignatorList);
    public void visit(Designator Designator);
    public void visit(Type Type);
    public void visit(FormPar FormPar);
    public void visit(OneElementFormParList OneElementFormParList);
    public void visit(MoreElementsFormPartList MoreElementsFormPartList);
    public void visit(EmptyFormPar EmptyFormPar);
    public void visit(NotEmptyFormPars NotEmptyFormPars);
    public void visit(VarIdent VarIdent);
    public void visit(VarIdentBrackets VarIdentBrackets);
    public void visit(VarIdentBracketsBrackets VarIdentBracketsBrackets);
    public void visit(VarListDerived1 VarListDerived1);
    public void visit(OneElementVarList OneElementVarList);
    public void visit(MoreElementsVarList MoreElementsVarList);
    public void visit(ConstListDerived1 ConstListDerived1);
    public void visit(OneElementConstList OneElementConstList);
    public void visit(MoreElementsConstList MoreElementsConstList);
    public void visit(CharValue CharValue);
    public void visit(BoolValue BoolValue);
    public void visit(NumValue NumValue);
    public void visit(Const Const);
    public void visit(VarDecl VarDecl);
    public void visit(ConstDecl ConstDecl);
    public void visit(EmptyDeclList EmptyDeclList);
    public void visit(NotEmptyDeclList NotEmptyDeclList);
    public void visit(RetValVoid RetValVoid);
    public void visit(RetValType RetValType);
    public void visit(Mapmid Mapmid);
    public void visit(Mapend Mapend);
    public void visit(DesignatorStatementMap DesignatorStatementMap);
    public void visit(DesignatorStatementMinusminus DesignatorStatementMinusminus);
    public void visit(DesignatorStatementPlusplus DesignatorStatementPlusplus);
    public void visit(DesignatorStatementActPars DesignatorStatementActPars);
    public void visit(DesignatorStatementNoActPars DesignatorStatementNoActPars);
    public void visit(DesignatorStatementAssign DesignatorStatementAssign);
    public void visit(StatementListDerived1 StatementListDerived1);
    public void visit(StatementListStatement StatementListStatement);
    public void visit(ConditionEnd ConditionEnd);
    public void visit(ConditionStart ConditionStart);
    public void visit(ErrorStmt ErrorStmt);
    public void visit(StatementStatement StatementStatement);
    public void visit(Print2paramsStatement Print2paramsStatement);
    public void visit(PrintStatement PrintStatement);
    public void visit(ReadStatement ReadStatement);
    public void visit(ReturnStatement ReturnStatement);
    public void visit(ReturnVoidStatement ReturnVoidStatement);
    public void visit(ContinueStatement ContinueStatement);
    public void visit(BreakStatement BreakStatement);
    public void visit(WhileStatement WhileStatement);
    public void visit(IfElseStatement IfElseStatement);
    public void visit(IfStatement IfStatement);
    public void visit(DesignatorStatementStatement DesignatorStatementStatement);
    public void visit(LoopStart LoopStart);
    public void visit(MethodName MethodName);
    public void visit(Meth Meth);
    public void visit(EmptyMethList EmptyMethList);
    public void visit(NotEmptyMethList NotEmptyMethList);
    public void visit(ProgramName ProgramName);
    public void visit(Program Program);

}
